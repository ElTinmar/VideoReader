function producer_consumer( ...
    videofile,...
    consumer_threads, ...
    OMP_threads, ...
    timeout,...
    timerflag)

maxNumCompThreads(OMP_threads);

c_queue_cell = cell(consumer_threads,1);
main_queue = parallel.pool.PollableDataQueue;

if timerflag
    num_frames = time_exec( ...
        videofile, ...
        main_queue, ...
        c_queue_cell,...
        consumer_threads, ...
        timeout ...
        );
else
    num_frames = start( ...
        videofile, ...
        main_queue, ...
        c_queue_cell,...
        consumer_threads, ...
        timeout ...
        );
end

    function frame_num = producer(mov,main_queue)
        
        frame_num = 0;
        while mov.hasFrame()
            frame = mov.readFrame();
            frame_gray = frame(:,:,1);
            frame_num = frame_num + 1;
            Data.frame = frame_gray;
            Data.num = frame_num;
            send(main_queue,Data);
        end
        
        % poison pill
        Data.frame = [];
        Data.num = -1;
        send(main_queue,Data);
    end

    function consumer(main_queue,timeout)
        
        % send each worker queue to the producer via the main thread
        c_queue = parallel.pool.PollableDataQueue;
        send(main_queue,c_queue);
                
        % wait for frames and process
        while ok
            [Data, ok] = poll(c_queue,timeout);
            frame = Data.frame;
            frame_num = Data.num;
            process(frame,frame_num);
        end
    end

    function process(frame,frame_num)
        disp(frame_num)
    end

    function num_frames = start( ...
            videofile, ...
            main_queue, ...
            c_queue_cell,...
            consumer_threads, ...
            timeout ...
        )
    
        mov = VideoReader(videofile);
        
        cons = cell(consumer_threads,1);
        for i=1:consumer_threads
            cons{i} = parfeval(@consumer,0,main_queue,timeout);
            c_queue_cell{i} = poll(main_queue,timeout);
        end
        
        prod = parfeval(...
            @producer,...
            1,...
            mov,...
            main_queue...
        );
        
        % because of MATLAB's client-to-worker architecture, communications
        % need to go through the client
        Data.frame = [];
        Data.num = 0;
        while true
            Data = poll(main_queue,timeout);
            if Data.num < 0
                break
            end
            % handle to which worker the task should go 
            send(c_queue_cell{1+mod(Data.num,consumer_threads)},Data)
        end
        
        num_frames = fetchOutputs(prod);
        for i=1:consumer_threads
            wait(cons{i})
        end
    end

    function num_frames = time_exec(...
            videofile, ...
            main_queue, ...
            c_queue_cell,...
            consumer_threads, ...
            timeout ...
            )
        starttime = tic;
        num_frames = start(...
            videofile,...
            main_queue,...
            c_queue_cell,...
            consumer_threads,...
            timeout...
            );
        dur = toc(starttime);
        fps = num_frames/dur;
        disp("Num_frames: " + num2str(num_frames) +...
            ", Time elapsed: " + num2str(dur) +...
            ", FPS: " + num2str(fps) ...
        )
    end
end